local M = {}

function M.load(colors, config)
  local transparent = config.transparent
  local italic_comments = config.italic_comments
  local underline_links = config.underline_links
  
  -- Base highlights
  local highlights = {
    -- Editor
    Normal = { fg = colors.fg, bg = transparent and colors.none or colors.bg },
    NormalNC = { fg = colors.fg, bg = transparent and colors.none or colors.bg },
    NormalFloat = { fg = colors.fg, bg = colors.bg_light },
    FloatBorder = { fg = colors.border, bg = colors.bg_light },
    ColorColumn = { bg = colors.bg_light },
    Cursor = { fg = colors.bg, bg = colors.cursor },
    lCursor = { fg = colors.bg, bg = colors.cursor },
    CursorIM = { fg = colors.bg, bg = colors.cursor },
    CursorColumn = { bg = colors.bg_light },
    CursorLine = { bg = colors.bg_light },
    Directory = { fg = colors.blue },
    DiffAdd = { fg = colors.git_add, bg = colors.bg_light },
    DiffChange = { fg = colors.git_change, bg = colors.bg_light },
    DiffDelete = { fg = colors.git_delete, bg = colors.bg_light },
    DiffText = { fg = colors.fg, bg = colors.git_change },
    EndOfBuffer = { fg = colors.bg },
    ErrorMsg = { fg = colors.error },
    VertSplit = { fg = colors.border },
    WinSeparator = { fg = colors.border },
    Folded = { fg = colors.fg_darker, bg = colors.bg_light },
    FoldColumn = { fg = colors.brown_light, bg = transparent and colors.none or colors.bg },
    SignColumn = { fg = colors.fg_darker, bg = transparent and colors.none or colors.bg },
    IncSearch = { fg = colors.bg, bg = colors.orange },
    Substitute = { fg = colors.bg, bg = colors.orange },
    LineNr = { fg = colors.line_nr },
    CursorLineNr = { fg = colors.line_nr_current, bold = true },
    MatchParen = { fg = colors.match_paren, bold = true },
    ModeMsg = { fg = colors.fg },
    MsgArea = { fg = colors.fg },
    MsgSeparator = { fg = colors.border },
    MoreMsg = { fg = colors.blue },
    NonText = { fg = colors.brown_light },
    Pmenu = { fg = colors.fg, bg = colors.pmenu },
    PmenuSel = { fg = colors.fg, bg = colors.pmenu_sel },
    PmenuSbar = { bg = colors.brown_light },
    PmenuThumb = { bg = colors.brown },
    Question = { fg = colors.blue },
    QuickFixLine = { bg = colors.visual },
    Search = { fg = colors.bg, bg = colors.search },
    SpecialKey = { fg = colors.brown_light },
    SpellBad = { fg = colors.error, undercurl = true },
    SpellCap = { fg = colors.warning, undercurl = true },
    SpellLocal = { fg = colors.info, undercurl = true },
    SpellRare = { fg = colors.hint, undercurl = true },
    StatusLine = { fg = colors.fg, bg = colors.statusline },
    StatusLineNC = { fg = colors.fg_darker, bg = colors.bg_light },
    TabLine = { fg = colors.fg_darker, bg = colors.tabline },
    TabLineFill = { bg = colors.tabline },
    TabLineSel = { fg = colors.fg, bg = colors.bg },
    Title = { fg = colors.orange, bold = true },
    Visual = { bg = colors.visual },
    VisualNOS = { bg = colors.visual },
    WarningMsg = { fg = colors.warning },
    Whitespace = { fg = colors.brown_light },
    WildMenu = { fg = colors.fg, bg = colors.pmenu_sel },

    -- Syntax highlighting
    Comment = { fg = colors.fg_darker, italic = italic_comments },
    Constant = { fg = colors.orange },
    String = { fg = colors.green },
    Character = { fg = colors.green },
    Number = { fg = colors.orange },
    Boolean = { fg = colors.orange },
    Float = { fg = colors.orange },
    Identifier = { fg = colors.fg },
    Function = { fg = colors.blue },
    Statement = { fg = colors.purple },
    Conditional = { fg = colors.purple },
    Repeat = { fg = colors.purple },
    Label = { fg = colors.purple },
    Operator = { fg = colors.fg },
    Keyword = { fg = colors.purple },
    Exception = { fg = colors.purple },
    PreProc = { fg = colors.cyan },
    Include = { fg = colors.cyan },
    Define = { fg = colors.cyan },
    Macro = { fg = colors.cyan },
    PreCondit = { fg = colors.cyan },
    Type = { fg = colors.yellow },
    StorageClass = { fg = colors.yellow },
    Structure = { fg = colors.yellow },
    Typedef = { fg = colors.yellow },
    Special = { fg = colors.magenta },
    SpecialChar = { fg = colors.magenta },
    Tag = { fg = colors.red },
    Delimiter = { fg = colors.fg },
    SpecialComment = { fg = colors.orange, italic = italic_comments },
    Debug = { fg = colors.red },
    Underlined = { fg = colors.blue, underline = underline_links },
    Ignore = { fg = colors.brown_light },
    Error = { fg = colors.error },
    Todo = { fg = colors.orange, bold = true },

    -- LSP
    LspReferenceText = { bg = colors.selection },
    LspReferenceRead = { bg = colors.selection },
    LspReferenceWrite = { bg = colors.selection },
    
    -- Diagnostics
    DiagnosticError = { fg = colors.error },
    DiagnosticWarn = { fg = colors.warning },
    DiagnosticInfo = { fg = colors.info },
    DiagnosticHint = { fg = colors.hint },
    DiagnosticVirtualTextError = { fg = colors.error, bg = colors.bg_light },
    DiagnosticVirtualTextWarn = { fg = colors.warning, bg = colors.bg_light },
    DiagnosticVirtualTextInfo = { fg = colors.info, bg = colors.bg_light },
    DiagnosticVirtualTextHint = { fg = colors.hint, bg = colors.bg_light },
    DiagnosticUnderlineError = { undercurl = true, sp = colors.error },
    DiagnosticUnderlineWarn = { undercurl = true, sp = colors.warning },
    DiagnosticUnderlineInfo = { undercurl = true, sp = colors.info },
    DiagnosticUnderlineHint = { undercurl = true, sp = colors.hint },

    -- Tree-sitter
    ["@variable"] = { fg = colors.fg },
    ["@variable.builtin"] = { fg = colors.red },
    ["@variable.parameter"] = { fg = colors.fg },
    ["@variable.member"] = { fg = colors.fg },
    ["@constant"] = { fg = colors.orange },
    ["@constant.builtin"] = { fg = colors.orange },
    ["@constant.macro"] = { fg = colors.cyan },
    ["@module"] = { fg = colors.yellow },
    ["@label"] = { fg = colors.purple },
    ["@string"] = { fg = colors.green },
    ["@string.documentation"] = { fg = colors.green },
    ["@string.regexp"] = { fg = colors.orange },
    ["@string.escape"] = { fg = colors.magenta },
    ["@string.special"] = { fg = colors.magenta },
    ["@character"] = { fg = colors.green },
    ["@character.special"] = { fg = colors.magenta },
    ["@boolean"] = { fg = colors.orange },
    ["@number"] = { fg = colors.orange },
    ["@number.float"] = { fg = colors.orange },
    ["@type"] = { fg = colors.yellow },
    ["@type.builtin"] = { fg = colors.yellow },
    ["@type.definition"] = { fg = colors.yellow },
    ["@attribute"] = { fg = colors.cyan },
    ["@property"] = { fg = colors.fg },
    ["@function"] = { fg = colors.blue },
    ["@function.builtin"] = { fg = colors.blue },
    ["@function.call"] = { fg = colors.blue },
    ["@function.macro"] = { fg = colors.cyan },
    ["@function.method"] = { fg = colors.blue },
    ["@function.method.call"] = { fg = colors.blue },
    ["@constructor"] = { fg = colors.yellow },
    ["@operator"] = { fg = colors.fg },
    ["@keyword"] = { fg = colors.purple },
    ["@keyword.coroutine"] = { fg = colors.purple },
    ["@keyword.function"] = { fg = colors.purple },
    ["@keyword.operator"] = { fg = colors.purple },
    ["@keyword.import"] = { fg = colors.cyan },
    ["@keyword.type"] = { fg = colors.yellow },
    ["@keyword.modifier"] = { fg = colors.purple },
    ["@keyword.repeat"] = { fg = colors.purple },
    ["@keyword.return"] = { fg = colors.purple },
    ["@keyword.debug"] = { fg = colors.red },
    ["@keyword.exception"] = { fg = colors.purple },
    ["@keyword.conditional"] = { fg = colors.purple },
    ["@keyword.conditional.ternary"] = { fg = colors.purple },
    ["@keyword.directive"] = { fg = colors.cyan },
    ["@keyword.directive.define"] = { fg = colors.cyan },
    ["@punctuation.delimiter"] = { fg = colors.fg },
    ["@punctuation.bracket"] = { fg = colors.fg },
    ["@punctuation.special"] = { fg = colors.magenta },
    ["@comment"] = { fg = colors.fg_darker, italic = italic_comments },
    ["@comment.documentation"] = { fg = colors.orange, italic = italic_comments },
    ["@comment.error"] = { fg = colors.error },
    ["@comment.warning"] = { fg = colors.warning },
    ["@comment.todo"] = { fg = colors.orange, bold = true },
    ["@comment.note"] = { fg = colors.info },
    ["@markup.strong"] = { bold = true },
    ["@markup.italic"] = { italic = true },
    ["@markup.strikethrough"] = { strikethrough = true },
    ["@markup.underline"] = { underline = true },
    ["@markup.heading"] = { fg = colors.orange, bold = true },
    ["@markup.quote"] = { fg = colors.fg_darker, italic = true },
    ["@markup.math"] = { fg = colors.cyan },
    ["@markup.link"] = { fg = colors.blue, underline = underline_links },
    ["@markup.link.label"] = { fg = colors.blue },
    ["@markup.link.url"] = { fg = colors.cyan, underline = underline_links },
    ["@markup.raw"] = { fg = colors.green },
    ["@markup.raw.block"] = { fg = colors.green },
    ["@markup.list"] = { fg = colors.purple },
    ["@markup.list.checked"] = { fg = colors.green },
    ["@markup.list.unchecked"] = { fg = colors.fg_darker },
    ["@diff.plus"] = { fg = colors.git_add },
    ["@diff.minus"] = { fg = colors.git_delete },
    ["@diff.delta"] = { fg = colors.git_change },
    ["@tag"] = { fg = colors.red },
    ["@tag.attribute"] = { fg = colors.yellow },
    ["@tag.delimiter"] = { fg = colors.fg },

    -- Git signs
    GitSignsAdd = { fg = colors.git_add },
    GitSignsChange = { fg = colors.git_change },
    GitSignsDelete = { fg = colors.git_delete },
    
    -- Telescope
    TelescopeNormal = { fg = colors.fg, bg = colors.bg_light },
    TelescopeBorder = { fg = colors.border, bg = colors.bg_light },
    TelescopePromptNormal = { fg = colors.fg, bg = colors.bg_lighter },
    TelescopePromptBorder = { fg = colors.border, bg = colors.bg_lighter },
    TelescopePromptTitle = { fg = colors.orange, bold = true },
    TelescopePreviewTitle = { fg = colors.orange, bold = true },
    TelescopeResultsTitle = { fg = colors.orange, bold = true },
    TelescopeSelection = { fg = colors.fg, bg = colors.pmenu_sel },
    TelescopeSelectionCaret = { fg = colors.orange },
    TelescopeMatching = { fg = colors.orange, bold = true },

    -- NvimTree
    NvimTreeNormal = { fg = colors.fg, bg = config.disable_nvimtree_bg and colors.none or colors.bg_alt },
    NvimTreeFolderName = { fg = colors.blue },
    NvimTreeFolderIcon = { fg = colors.blue },
    NvimTreeOpenedFolderName = { fg = colors.blue, bold = true },
    NvimTreeEmptyFolderName = { fg = colors.fg_darker },
    NvimTreeIndentMarker = { fg = colors.brown_light },
    NvimTreeVertSplit = { fg = colors.border },
    NvimTreeRootFolder = { fg = colors.orange, bold = true },
    NvimTreeSymlink = { fg = colors.cyan },
    NvimTreeStatuslineNc = { fg = colors.bg_alt, bg = colors.bg_alt },
    NvimTreeGitDirty = { fg = colors.git_change },
    NvimTreeGitNew = { fg = colors.git_add },
    NvimTreeGitDeleted = { fg = colors.git_delete },
    NvimTreeSpecialFile = { fg = colors.magenta },
    NvimTreeImageFile = { fg = colors.purple },
    NvimTreeMarkdownFile = { fg = colors.blue },

    -- Which-key
    WhichKey = { fg = colors.purple },
    WhichKeyGroup = { fg = colors.blue },
    WhichKeyDesc = { fg = colors.fg },
    WhichKeySeperator = { fg = colors.brown_light },
    WhichKeyFloat = { bg = colors.bg_light },
    WhichKeyBorder = { fg = colors.border },

    -- Indent Blankline
    IndentBlanklineChar = { fg = colors.brown_light },
    IndentBlanklineContextChar = { fg = colors.brown },

    -- Neo-tree
    NeoTreeNormal = { fg = colors.fg, bg = config.disable_nvimtree_bg and colors.none or colors.bg_alt },
    NeoTreeNormalNC = { fg = colors.fg, bg = config.disable_nvimtree_bg and colors.none or colors.bg_alt },
    NeoTreeDirectoryName = { fg = colors.blue },
    NeoTreeDirectoryIcon = { fg = colors.blue },
    NeoTreeRootName = { fg = colors.orange, bold = true },
    NeoTreeFileName = { fg = colors.fg },
    NeoTreeFileIcon = { fg = colors.fg },
    NeoTreeFileNameOpened = { fg = colors.orange },
    NeoTreeIndentMarker = { fg = colors.brown_light },
    NeoTreeGitAdded = { fg = colors.git_add },
    NeoTreeGitDeleted = { fg = colors.git_delete },
    NeoTreeGitModified = { fg = colors.git_change },
    NeoTreeGitConflict = { fg = colors.red },
    NeoTreeGitUntracked = { fg = colors.purple },

    -- Bufferline
    BufferLineBackground = { fg = colors.fg_darker, bg = colors.tabline },
    BufferLineBuffer = { fg = colors.fg_darker, bg = colors.tabline },
    BufferLineBufferSelected = { fg = colors.fg, bg = colors.bg, bold = true },
    BufferLineBufferVisible = { fg = colors.fg, bg = colors.bg_light },
    BufferLineCloseButton = { fg = colors.fg_darker, bg = colors.tabline },
    BufferLineCloseButtonSelected = { fg = colors.red, bg = colors.bg },
    BufferLineCloseButtonVisible = { fg = colors.fg, bg = colors.bg_light },
    BufferLineFill = { bg = colors.bg_alt },
    BufferLineIndicatorSelected = { fg = colors.orange, bg = colors.bg },
    BufferLineModified = { fg = colors.git_change, bg = colors.tabline },
    BufferLineModifiedSelected = { fg = colors.git_change, bg = colors.bg },
    BufferLineModifiedVisible = { fg = colors.git_change, bg = colors.bg_light },
    BufferLineSeparator = { fg = colors.border, bg = colors.tabline },
    BufferLineSeparatorSelected = { fg = colors.border, bg = colors.bg },
    BufferLineSeparatorVisible = { fg = colors.border, bg = colors.bg_light },
    BufferLineTab = { fg = colors.fg_darker, bg = colors.tabline },
    BufferLineTabSelected = { fg = colors.fg, bg = colors.bg },
    BufferLineTabClose = { fg = colors.red, bg = colors.tabline },

    -- Lualine
    lualine_a_normal = { fg = colors.bg, bg = colors.orange, bold = true },
    lualine_b_normal = { fg = colors.fg, bg = colors.bg_light },
    lualine_c_normal = { fg = colors.fg_darker, bg = colors.statusline },
  }
  
  -- Apply highlights
  for group, opts in pairs(highlights) do
    vim.api.nvim_set_hl(0, group, opts)
  end
end

return M 